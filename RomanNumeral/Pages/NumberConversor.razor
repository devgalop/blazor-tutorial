@page "/Conversor"

<h3>Conversor:</h3>

<div class="mb-3">
    <select class="form-select" name="conversionType" @bind="_conversionTypeSelected">
        <option value="0">Select a conversion type</option>
        @foreach(var conversionType in _conversionTypes)
        {
            <option value="@conversionType.Id">@conversionType.Title</option>
        }
    </select>
</div>

<div class="mb-3">
    <h4>Conversion type selected : @_conversionTypeSelected</h4>
    @if(_conversionTypeSelected == 1)
    {
        <div class="">
            <label for="">Number:</label>
            <input type="text" placeholder="Write a number" @bind="_naturalRequest.Number">
            <button class="btn btn-primary" @onclick="ConvertFromNaturalToRoman">Convert</button>
        </div>
        @if(!string.IsNullOrEmpty(_naturalResponse.RomanNumberConverted))
        {
            <div class="" style="padding-top: 20px">
                <h4 class="alert alert-primary">The number @_naturalRequest.Number converted to roman number is: @_naturalResponse.RomanNumberConverted</h4>
            </div>
        }
    }else if(_conversionTypeSelected == 2)
    {
        <div class="">
            <label for="">Number:</label>
            <input type="text" placeholder="Write the roman number" @bind="_romanRequest.RomanNumber">
            <button class="btn btn-primary" @onclick="ConvertFromRomanToNatural">Convert</button>
        </div>
        @if(_romanRespone.NumberConverted > 0)
        {
            <div class="" style="padding-top: 20px">
                <h4 class="alert alert-primary">The roman number @_romanRequest.RomanNumber converted to natural number is: @_romanRespone.NumberConverted</h4>
            </div>
        }
    }
</div>



@code {
    private List<ConversionType> _conversionTypes = new();
    private int _conversionTypeSelected;
    private RomanRequest _romanRequest = new();
    private NaturalRequest _naturalRequest = new();
    private RomanResponse _romanRespone = new();
    private NaturalResponse _naturalResponse = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _conversionTypes = new List<ConversionType>()
        {
            new ConversionType()
            {
                Id = 1,
                Title = "From Natural to Roman"
            },
            new ConversionType()
            {
                Id = 2,
                Title = "From Roman to Natural"
            }
        };
    }

    private void ConvertFromNaturalToRoman()
    {
        _naturalResponse.RomanNumberConverted = GetRomanNumber(_naturalRequest.Number);
    }

    private void ConvertFromRomanToNatural()
    {
        _romanRespone.NumberConverted = GetNaturalNumber(_romanRequest.RomanNumber.ToUpper());
    }

    private string GetRomanNumber(int number)
    {
        if ((number < 0) || (number > 3999)) throw new ArgumentOutOfRangeException("insert value betwheen 1 and 3999");
        if (number < 1) return string.Empty;            
        if (number >= 1000) return "M" + GetRomanNumber(number - 1000);
        if (number >= 900) return "CM" + GetRomanNumber(number - 900); 
        if (number >= 500) return "D" + GetRomanNumber(number - 500);
        if (number >= 400) return "CD" + GetRomanNumber(number - 400);
        if (number >= 100) return "C" + GetRomanNumber(number - 100);            
        if (number >= 90) return "XC" + GetRomanNumber(number - 90);
        if (number >= 50) return "L" + GetRomanNumber(number - 50);
        if (number >= 40) return "XL" + GetRomanNumber(number - 40);
        if (number >= 10) return "X" + GetRomanNumber(number - 10);
        if (number >= 9) return "IX" + GetRomanNumber(number - 9);
        if (number >= 5) return "V" + GetRomanNumber(number - 5);
        if (number >= 4) return "IV" + GetRomanNumber(number - 4);
        if (number >= 1) return "I" + GetRomanNumber(number - 1);
        throw new ArgumentOutOfRangeException("something bad happened");
    }

    private int GetNaturalNumber(string romanNumber) 
    {
        int numberConverted = 0;
        int nextNumber = 0;
        int actualNumber = 0;
        for (var i = 0; i < romanNumber.Length-1; i++)
        {
            actualNumber = GetNumber(romanNumber.ToCharArray()[i]);
            nextNumber = GetNumber(romanNumber.ToCharArray()[i+1]);
            if (actualNumber < nextNumber)
            {
                numberConverted -= actualNumber;
                continue;
            }
            numberConverted += actualNumber;
        }
        numberConverted +=nextNumber;
        return numberConverted;
    }

    private int GetNumber(char romanNumber)
    {
        if(string.IsNullOrEmpty(romanNumber.ToString())) throw new ArgumentOutOfRangeException("It's not a valid number");
        if(romanNumber == 'M') return 1000;
        if(romanNumber == 'D') return 500;
        if(romanNumber == 'C') return 100;
        if(romanNumber == 'L') return 50;
        if(romanNumber == 'X') return 10;
        if(romanNumber == 'V') return 5;
        if(romanNumber == 'I') return 1;
        throw new ArgumentOutOfRangeException("something bad happened");
    }

}
